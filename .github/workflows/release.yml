name: Android Release

on:
  push:
    branches:
      - appRelease

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      APK_PATH: ${{ github.workspace }}/app/build/outputs/apk/release
      APK_NAME_BASE: app-release-${{ steps.get_version.outputs.sha_short }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x gradlew

      - name: Decode and store Google services configuration
        run: echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | base64 -d > app/google-services.json

      - name: Decode and store keystore
        run: echo "${{ secrets.KEYSTORE_PATH }}" | base64 -d > app/keystore.jks

      - name: Verify keystore existence
        run: ls -al ${{ github.workspace }}/app/

      - name: Get the version (commit SHA)
        id: get_version
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Build the release APK
        run: ./gradlew assembleRelease
        env:
          KEYSTORE_PATH: ${{ github.workspace }}/app/keystore.jks
          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      - name: Copy and rename APK for release
        run: cp ${APK_PATH}/app-release.apk ${APK_PATH}/${APK_NAME_BASE}.apk

      - name: Display directory contents
        run: ls -al ${APK_PATH}

      - name: Create GitHub release
        id: create_release
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0)
          RELEASE_NOTES=$(git log ${LATEST_TAG}..HEAD --oneline)

          gh release create release-${{ steps.get_version.outputs.sha_short }} \
            --title "Release for commit ${{ steps.get_version.outputs.sha_short }}" \
            --notes "$RELEASE_NOTES" \
            --repo ${{ github.repository }}

          UPLOAD_URL=$(gh api repos/${{ github.repository }}/releases/latest --jq '.upload_url')
          echo "::set-output name=upload_url::$UPLOAD_URL"
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}


      - name: Upload APK asset to GitHub release
        run: |
          gh release upload release-${{ steps.get_version.outputs.sha_short }} \
            ${APK_PATH}/${APK_NAME_BASE}.apk
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}